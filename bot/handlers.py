import os
from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    FSInputFile,
)
from agents.teacher_agent import agent_run
from database.models import UserMessage
from database.db import SessionLocal
from tools.quiz import generate_quiz
from tools.pdf_generator import generate_pdf, generate_pdf_plan
from tools.planner import generate_plan

router = Router()

@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-—É—á–∏—Ç–µ–ª—å.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìò /pdf <—Ç–µ–º–∞> ‚Äî PDF-—É—Ä–æ–∫\n"
        "üìã /–ø–ª–∞–Ω <—Ç–µ–º–∞> ‚Äî –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è\n"
        "üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ <—Ç–µ–º–∞> ‚Äî —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )

@router.message(Command("pdf"))
async def cmd_pdf(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùó –£–∫–∞–∂–∏ —Ç–µ–º—É: /pdf Python")
        return

    topic = args[1]
    try:
        filepath = generate_pdf(topic)
        file = FSInputFile(filepath)
        await message.answer_document(file, caption=f"üìò –£—Ä–æ–∫ –ø–æ —Ç–µ–º–µ: <b>{topic}</b>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")

@router.message(F.text.lower().startswith("–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞"))
async def cmd_quiz(message: Message):
    topic = message.text.replace("–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞", "").strip()
    questions = generate_quiz(topic)

    for i, q in enumerate(questions):
        buttons = [
            [InlineKeyboardButton(text=opt, callback_data=f"quiz:{i}:{opt}:{q['answer']}")]
            for opt in q['options']
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(q['question'], reply_markup=markup)

@router.message(F.text.lower().startswith("/—É—Ä–æ–∫"))
async def cmd_lesson(message: Message):
    topic = message.text.replace("/—É—Ä–æ–∫", "").strip()
    await message.answer("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF-—É—Ä–æ–∫...")
    try:
        pdf_path = generate_pdf(topic)
        file = FSInputFile(pdf_path)
        await message.answer_document(file, caption=f"üìö –£—Ä–æ–∫ –ø–æ —Ç–µ–º–µ: <b>{topic}</b>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF-—Ñ–∞–π–ª.")
        print(e)


@router.message(F.text.lower().startswith("/–ø–ª–∞–Ω"))
async def cmd_plan(message: Message):
    topic = message.text.replace("/–ø–ª–∞–Ω", "").strip()
    await message.answer("üìã –§–æ—Ä–º–∏—Ä—É—é PDF-–ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è...")

    try:
        plan = generate_plan(topic)
        filepath = generate_pdf_plan(topic, plan)
        file = FSInputFile(filepath)
        await message.answer_document(file, caption=f"üìã –ü–ª–∞–Ω –ø–æ —Ç–µ–º–µ: <b>{topic}</b>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω.")
        print(e)

@router.message()
async def handle_prompt(message: Message):
    user_input = message.text.strip()
    await message.answer("‚è≥ –î—É–º–∞—é...")

    db = SessionLocal()
    try:
        result = await agent_run(user_input, user_id=message.from_user.id)

        entry = UserMessage(
            user_id=message.from_user.id,
            message=user_input,
            response=result
        )
        db.add(entry)
        db.commit()

        await message.answer(result, parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        print(e)
    finally:
        db.close()


@router.callback_query(F.data.startswith("quiz:"))
async def handle_quiz_answer(callback: CallbackQuery):
    try:
        _, q_id, user_choice, correct = callback.data.split(":")
        text = "‚úÖ –í–µ—Ä–Ω–æ!" if user_choice == correct else f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"
        await callback.message.edit_reply_markup()
        await callback.message.answer(text)
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        print(e)


def setup_handlers(dp):
    dp.include_router(router)